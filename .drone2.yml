  #################################################### Nightly Steps ############################################################
kind: pipeline
type: docker
name: ntr-web-nightly
trigger:
  event:
    - cron
concurrency:
  limit: 1
volumes:
- name: docker_sock
  host:
    path: /var/run/docker.sock

services:
  - name: zap
    image: owasp/zap2docker-stable
    commands:
      - zap.sh -daemon -host 0.0.0.0 -port 8080 -config api.addrs.addr.name=.* -config api.addrs.addr.regex=true -config api.disablekey=true
    ports:
      - 8080

steps:

  - name: build testing tools image
    image: docker:19.03.11-git
    volumes:
      - name: docker_sock
        path: /var/run/docker.sock
    commands:
      - mkdir ~/.ssh
      - echo -e "$GIT_PRIVATE_SSH" > ~/.ssh/id_rsa
      - chmod 600 ~/.ssh/id_rsa
      - touch ~/.ssh/known_hosts
      - chmod 600 ~/.ssh/known_hosts
      - ssh-keyscan -H github.com > /etc/ssh/ssh_known_hosts 2> /dev/null
      - git clone git@github.com:InformedSolutions/JAQU-CAZ-QA-selenium.git
      - cd JAQU-CAZ-QA-selenium
      - docker build -t test-tools-image .
    environment:
      GIT_PRIVATE_SSH:
        from_secret: jaqu_lower_github_private_key

  - name: run owasp zap tests
    image: test-tools-image
    pull: never
    failure: ignore
    environment:
      ZAP: true
      ZAP_PROXY_URL: 'zap'
      BASEURL_NTR: 'https://dev-ntr-web.cleanairzone.defra.gov.uk'
      VALID_USERNAME: 'tester@informed.com'
      VALID_PASSWORD: 'Tester123...'
      SCREENSHOT_TYPE: 'base'
      LOCATION: local
    commands:
      - cd JAQU-CAZ-QA-selenium
      - cucumber -t @ZAPNTR

  - name: security warning
    image: docker:19.03.11-git
    commands:
      - echo "OWASP ZAP tests failed. Please check outputs in case of false positives."
    when:
      status:
        - failure

    # Run end to end tests
  - name: run end to end tests
    image: test-tools-image
    pull: never
    environment:
      BS_USERNAME:
        from_secret: browserstack_username
      BS_AUTHKEY:
        from_secret: browserstack_auth_key
      BASEURL_NTR: 'https://dev-ntr-web.cleanairzone.defra.gov.uk'
      VALID_USERNAME: 'tester@informed.com'
      VALID_PASSWORD: 'Tester123...'
      BROWSER_SET: 'mid'
      SCREENSHOT_TYPE: 'base'
      BUILD: NTR-UI-${DRONE_BUILD_NUMBER}
      SPECTRE: false
      LOCATION: browserstack
    commands:
      - cd JAQU-CAZ-QA-selenium
      - cucumber -t @NTR --guess --retry 3

  ################################################# End Nightly Steps ############################################################


---

################################################### Dev Environment Steps ############################################################
kind: pipeline
type: docker
name: ntr-web-dev
trigger:
  branch:
    - develop
  event:
    - pull_request
    - push
concurrency:
  limit: 1
volumes:
- name: docker_sock
  host:
    path: /var/run/docker.sock

steps:

  # Build docker image
  - name: build
    image: docker:19.03.11-git
    commands:
    - docker build -f Dockerfile.test -t test-national-taxi-register-frontend:latest .
    volumes:
      - name: docker_sock
        path: /var/run/docker.sock
    build_args:
      - AWS_REGION=eu-west-2

  # Trigger unit tests
  - name: unit tests
    image: test-national-taxi-register-frontend
    pull: never
    volumes:
      - name: docker_sock
        path: /var/run/docker.sock
    commands:
      - yarn install
      - rspec -f d

  # Execute integration/scenario tests
  - name: integration tests
    image: test-national-taxi-register-frontend
    pull: never
    volumes:
      - name: docker_sock
        path: /var/run/docker.sock
    commands:
      - cucumber

  # Invoke static code analysis through Ruby libraries
  - name: static code analysis (Ruby)
    image: test-national-taxi-register-frontend
    pull: never
    commands:
      - rubocop
      - node_modules/.bin/stylelint 'app/javascript/**/*.(s)?scss'
    volumes:
      - name: docker_sock
        path: /var/run/docker.sock

  # Invoke security analysis through Ruby libraries
  - name: security tests (Ruby)
    image: test-national-taxi-register-frontend
    pull: never
    commands:
      - bundle audit check --update
      - yarn run improved-yarn-audit --retry-on-network-failure
      - brakeman
    volumes:
      - name: docker_sock
        path: /var/run/docker.sock

  # Invoke sonar scan
  - name: sonar scan
    image: aosapps/drone-sonar-plugin
    environment:
      SONAR_HOST:
        from_secret: jaqu_lower_sonar_host
      SONAR_TOKEN:
        from_secret: jaqu_lower_sonar_token
      sonar.ruby.coverage.reportPaths: coverage/.resultset.json
    commands:
      - sonar-scanner
        -Dsonar.projectName=${DRONE_REPO}
        -Dsonar.host.url=$SONAR_HOST
        -Dsonar.login=$SONAR_TOKEN
        -Dproject.settings=./sonar-project.properties


 # Push built image to ECR registry
  - name: publish dev image to ecr
    image: plugins/ecr
    settings:
      access_key:
        from_secret: jaqu_lower_service_aws_access_key_id
      secret_key:
        from_secret: jaqu_lower_service_aws_secret_access_key
      repo: 311075478274.dkr.ecr.eu-west-2.amazonaws.com/ntr-repo
      registry: 311075478274.dkr.ecr.eu-west-2.amazonaws.com
      dockerfile: Dockerfile.build
      region: eu-west-2
      use_cache: true
      tags:
        - latest
        - ${DRONE_BUILD_NUMBER}
      build_args:
        - secret_key_base=${DRONE_COMMIT}
        - AWS_REGION=eu-west-2
    volumes:
      - name: docker_sock
        path: /var/run/docker.sock
    when:
      event:
        - push


  # Invoke terraform scripts with tagged image number
  - name: deploy to dev
    image: hashicorp/terraform:0.12.23
    commands:
      - apk add --update bash python python-dev py-pip build-base jq
      - pip install awscli
      - mkdir ~/.ssh
      - echo -e "$GIT_PRIVATE_SSH" > ~/.ssh/id_rsa
      - chmod 600 ~/.ssh/id_rsa
      - touch ~/.ssh/known_hosts
      - chmod 600 ~/.ssh/known_hosts
      - ssh-keyscan -H github.com > /etc/ssh/ssh_known_hosts 2> /dev/null
      - git clone git@github.com:InformedSolutions/JAQU-CAZ-IAC.git
      - cd JAQU-CAZ-IAC
      - git checkout lower_dev
      - cd terraform-iac/projects/ntr/layers/01.networking
      - PATH=$PATH:../../../../bin/
      - chmod +x ../../../../bin/tf
      - tf init
      - tf workspace select dev || tf workspace new dev
      - tf apply -auto-approve
      - cd ../02.backends
      - tf init
      - tf workspace select dev || tf workspace new dev
      - tf apply -auto-approve
      - cd ../04.web
      - tf init
      - tf workspace select dev || tf workspace new dev
      - tf apply -auto-approve
    environment:
      TF_VAR_access_key:
        from_secret: jaqu_lower_aws_access_key_id
      TF_VAR_secret_key:
        from_secret: jaqu_lower_aws_secret_access_key
      TF_VAR_s3_aws_access_key_id:
        from_secret: jaqu_lower_aws_access_key_id
      TF_VAR_s3_aws_secret_access_key:
        from_secret: jaqu_lower_aws_secret_access_key
      TF_VAR_master_access_key:
        from_secret: jaqu_master_aws_access_key_id
      TF_VAR_master_secret_key:
        from_secret: jaqu_master_aws_secret_access_key
      AWS_ACCESS_KEY_ID:
        from_secret: jaqu_lower_aws_access_key_id
      AWS_SECRET_ACCESS_KEY:
        from_secret: jaqu_lower_aws_secret_access_key
      GIT_PRIVATE_SSH:
        from_secret: jaqu_lower_github_private_key
      AWS_DEFAULT_REGION: eu-west-2
      AWS_ACCOUNT_NAME: jaqu-lower
      TF_VAR_build_number: ${DRONE_BUILD_NUMBER}
      TF_VAR_secret_key_base:
        from_secret: ntr_ruby_secret
      TF_VAR_google_analytics_id: UA-144774549-1
      TF_VAR_session_timeout: 15
      TF_VAR_feedback_url: https://defragroup.eu.qualtrics.com/jfe/form/SV_2iugBKyyYVyl0LX
      environment: dev
    when:
      event:
        - push

  - name: codedeploy ui dev
    image: alpine:3.11.6
    commands:
      - apk add --update bash python python-dev py-pip build-base jq
      - pip install awscli
      - mkdir ~/.aws
      - echo -e "[profile target_acc]\nrole_arn = $AWS_ACCOUNT_ROLE\ncredential_source = Environment\nrole_session_name = AWSACCOUNT" > ~/.aws/config
      - aws s3 cp s3://$LAMBDA_BUCKET/$PROJECT/$DEPLOY_ENVIRONMENT/wait_deploy.sh . --profile target_acc
      - bash wait_deploy.sh $APPLICATION_NAME $DEPLOYMENT_GROUP
      - aws deploy create-deployment --application-name $APPLICATION_NAME --deployment-config-name CodeDeployDefault.ECSAllAtOnce --deployment-group-name $DEPLOYMENT_GROUP --description "Deployment ECS" --s3-location bucket=jaqu-shared-project-lambda-bucket,bundleType=yaml,key=$PROJECT/$DEPLOY_ENVIRONMENT/appspec.yaml --profile target_acc
    environment:
      AWS_ACCESS_KEY_ID:
        from_secret: jaqu_lower_aws_access_key_id
      AWS_SECRET_ACCESS_KEY:
        from_secret: jaqu_lower_aws_secret_access_key
      AWS_DEFAULT_REGION: eu-west-2
      APPLICATION_NAME: ntr-codedeploy-service-dev
      DEPLOYMENT_GROUP: ntr-codedeploy-service-dev
      AWS_ACCOUNT_ROLE: arn:aws:iam::311075478274:role/jaqu-lowerServiceRole
      PROJECT: ntr
      DEPLOY_ENVIRONMENT: dev
      LAMBDA_BUCKET: jaqu-shared-project-lambda-bucket
    when:
      event:
        - push

  - name: await ecs rollout
    image: docker:19.03.11-git
    environment:
      build_id_url: https://dev-ntr-web.cleanairzone.defra.gov.uk/build_id
      build_id: ${DRONE_BUILD_NUMBER}
    commands:
      - apk add curl
      - sh ci-cd-resources/check_build_number.sh
    volumes:
      - name: docker_sock
        path: /var/run/docker.sock
    when:
      event:
        - push

    # Build pa11y-ci image
  - name: build pa11y-ci image
    image: docker:19.03.11-git
    commands:
      - cd ci-cd-resources/pa11y
      - docker build -t pa11y-ci .
    volumes:
      - name: docker_sock
        path: /var/run/docker.sock
    when:
      event:
        - push

  # Trigger accessibility test
  - name: accessibility tests
    image: pa11y-ci
    pull: never
    environment:
      BASE_URL: https://dev-ntr-web.cleanairzone.defra.gov.uk
    commands:
      - mkdir screenshots
      - /usr/local/bin/pa11y-ci -c ci-cd-resources/pa11y/.pa11yci.conf.js
    when:
      event:
        - push

  # Execute jMeter scripts via taurus
  - name: micro-performance tests
    image: blazemeter/taurus
    commands:
      - gem install csv
      - ruby ci-cd-resources/jmeter/generate_taxi.rb
      - mv CAZ-2020-01-08-100.csv jmeter
      - bzt -o modules.jmeter.properties.hostname=dev-ntr-web.cleanairzone.defra.gov.uk ci-cd-resources/jmeter/ntr_valid_upload.jmx ci-cd-resources/jmeter/assertion.yml
    volumes:
      - name: docker_sock
        path: /var/run/docker.sock
    when:
      event:
        - push


  ################################################# End of Dev Environment Steps ############################################################

---
#################################################### ST Environment Steps ############################################################

kind: pipeline
type: docker
name: ntr-web-st
trigger:
  branch:
    - release-candidate/*
  event:
    - pull_request
    - push
concurrency:
  limit: 1
volumes:
- name: docker_sock
  host:
    path: /var/run/docker.sock

steps:

  # Clean agent images and containers to prevent disk space overuse
  - name: clean agent
    image: docker:19.03.11-git
    commands:
    - docker system prune -f
    volumes:
      - name: docker_sock
        path: /var/run/docker.sock

  # Build docker image
  - name: build
    image: docker:19.03.11-git
    commands:
    - docker build -f Dockerfile.test -t test-national-taxi-register-frontend:latest .
    volumes:
      - name: docker_sock
        path: /var/run/docker.sock
    build_args:
      - AWS_REGION=eu-west-2


  # Trigger unit tests
  - name: unit tests
    image: test-national-taxi-register-frontend
    pull: never
    volumes:
      - name: docker_sock
        path: /var/run/docker.sock
    commands:
      - yarn install
      - rspec -f d

  # Execute integration/scenario tests
  - name: integration tests
    image: test-national-taxi-register-frontend
    pull: never
    volumes:
      - name: docker_sock
        path: /var/run/docker.sock
    commands:
      - cucumber

  # Invoke static code analysis through Ruby libraries
  - name: static code analysis (Ruby)
    image: test-national-taxi-register-frontend
    pull: never
    commands:
      - rubocop
      - node_modules/.bin/stylelint 'app/javascript/**/*.(s)?scss'
    volumes:
      - name: docker_sock
        path: /var/run/docker.sock

  # Invoke security analysis through Ruby libraries
  - name: security tests (Ruby)
    image: test-national-taxi-register-frontend
    pull: never
    commands:
      - bundle audit check --update
      - yarn run improved-yarn-audit --retry-on-network-failure
      - brakeman
    volumes:
      - name: docker_sock
        path: /var/run/docker.sock


 # Push built image to ECR registry
  - name: publish ST image to ecr
    image: plugins/ecr
    settings:
      access_key:
        from_secret: jaqu_controlled_service_aws_access_key_id
      secret_key:
        from_secret: jaqu_controlled_service_aws_secret_access_key
      repo: 311075478274.dkr.ecr.eu-west-2.amazonaws.com/ntr-repo
      registry: 311075478274.dkr.ecr.eu-west-2.amazonaws.com
      dockerfile: Dockerfile.build
      region: eu-west-2
      tags:
        - release-candidate
        - ${DRONE_BUILD_NUMBER}
      build_args:
        - secret_key_base=${DRONE_COMMIT}
        - AWS_REGION=eu-west-2
    when:
      event:
        - push


  - name: plan terraform updates in st
    image: hashicorp/terraform:0.12.23
    commands:
      - apk add --update bash python python-dev py-pip build-base jq
      - pip install awscli
      - mkdir ~/.ssh
      - echo -e "$GIT_PRIVATE_SSH" > ~/.ssh/id_rsa
      - chmod 600 ~/.ssh/id_rsa
      - touch ~/.ssh/known_hosts
      - chmod 600 ~/.ssh/known_hosts
      - ssh-keyscan -H github.com > /etc/ssh/ssh_known_hosts 2> /dev/null
      - git clone git@github.com:InformedSolutions/JAQU-CAZ-IAC.git
      - cd JAQU-CAZ-IAC
      - git checkout controlled_st
      - cd terraform-iac/projects/ntr/layers/01.networking
      - PATH=$PATH:../../../../bin/
      - chmod +x ../../../../bin/tf
      - tf init
      - tf workspace select st || tf workspace new st
      - tf plan
      - cd ../02.backends
      - tf init
      - tf workspace select st|| tf workspace new st
      - tf plan
      - cd ../04.web
      - tf init
      - tf workspace select st || tf workspace new st
      - tf plan

    environment:
      TF_VAR_access_key:
        from_secret: jaqu_controlled_aws_access_key_id
      TF_VAR_secret_key:
        from_secret: jaqu_controlled_aws_secret_access_key
      TF_VAR_s3_aws_access_key_id:
        from_secret: jaqu_controlled_aws_access_key_id
      TF_VAR_s3_aws_secret_access_key:
        from_secret: jaqu_controlled_aws_secret_access_key
      TF_VAR_master_access_key:
        from_secret: jaqu_master_aws_access_key_id
      TF_VAR_master_secret_key:
        from_secret: jaqu_master_aws_secret_access_key
      AWS_ACCESS_KEY_ID:
        from_secret: jaqu_controlled_aws_access_key_id
      AWS_SECRET_ACCESS_KEY:
        from_secret: jaqu_controlled_aws_secret_access_key
      GIT_PRIVATE_SSH:
        from_secret: jaqu_lower_github_private_key
      AWS_DEFAULT_REGION: eu-west-2
      AWS_ACCOUNT_NAME: jaqu-controlled
      TF_VAR_build_number: ${DRONE_BUILD_NUMBER}
      TF_VAR_secret_key_base:
        from_secret: ntr_ruby_secret
      TF_VAR_google_analytics_id: UA-144774549-1
      TF_VAR_session_timeout: 15
      TF_VAR_feedback_url: https://defragroup.eu.qualtrics.com/jfe/form/SV_2iugBKyyYVyl0LX
      environment: st
    when:
      event:
        - pull_request

  - name: provisioning warning
    image: docker:19.03.11-git
    commands:
      - echo "Pipeline failed. If a deployment is being made for the first time into an environment terraform backends will not yet exist which means this is to be expected. If not terraform related, please see logs for further details"
    when:
      status:
        - failure

  # Invoke terraform scripts with tagged image number
  - name: deploy to st
    image: hashicorp/terraform:0.12.23
    commands:
      - apk add --update bash python python-dev py-pip build-base jq
      - pip install awscli
      - mkdir ~/.ssh
      - echo -e "$GIT_PRIVATE_SSH" > ~/.ssh/id_rsa
      - chmod 600 ~/.ssh/id_rsa
      - touch ~/.ssh/known_hosts
      - chmod 600 ~/.ssh/known_hosts
      - ssh-keyscan -H github.com > /etc/ssh/ssh_known_hosts 2> /dev/null
      - git clone git@github.com:InformedSolutions/JAQU-CAZ-IAC.git
      - cd JAQU-CAZ-IAC
      - git checkout controlled_st
      - cd terraform-iac/projects/ntr/layers/01.networking
      - PATH=$PATH:../../../../bin/
      - chmod +x ../../../../bin/tf
      - tf init
      - tf workspace select st || tf workspace new st
      - tf apply -auto-approve
      - cd ../02.backends
      - tf init
      - tf workspace select st || tf workspace new st
      - tf apply -auto-approve
      - cd ../04.web
      - tf init
      - tf workspace select st || tf workspace new st
      - tf apply -auto-approve
    environment:
      TF_VAR_access_key:
        from_secret: jaqu_controlled_aws_access_key_id
      TF_VAR_secret_key:
        from_secret: jaqu_controlled_aws_secret_access_key
      TF_VAR_s3_aws_access_key_id:
        from_secret: jaqu_controlled_aws_access_key_id
      TF_VAR_s3_aws_secret_access_key:
        from_secret: jaqu_controlled_aws_secret_access_key
      TF_VAR_master_access_key:
        from_secret: jaqu_master_aws_access_key_id
      TF_VAR_master_secret_key:
        from_secret: jaqu_master_aws_secret_access_key
      AWS_ACCESS_KEY_ID:
        from_secret: jaqu_controlled_aws_access_key_id
      AWS_SECRET_ACCESS_KEY:
        from_secret: jaqu_controlled_aws_secret_access_key
      GIT_PRIVATE_SSH:
        from_secret: jaqu_lower_github_private_key
      AWS_DEFAULT_REGION: eu-west-2
      AWS_ACCOUNT_NAME: jaqu-controlled
      TF_VAR_build_number: ${DRONE_BUILD_NUMBER}
      TF_VAR_secret_key_base:
        from_secret: ntr_ruby_secret
      TF_VAR_google_analytics_id: UA-144774549-1
      TF_VAR_session_timeout: 15
      TF_VAR_feedback_url: https://defragroup.eu.qualtrics.com/jfe/form/SV_2iugBKyyYVyl0LX
      environment: st
    when:
      event:
        - push

  - name: codedeploy ui st
    image: alpine:3.11.6
    commands:
      - apk add --update bash python python-dev py-pip build-base jq
      - pip install awscli
      - mkdir ~/.aws
      - echo -e "[profile target_acc]\nrole_arn = $AWS_ACCOUNT_ROLE\ncredential_source = Environment\nrole_session_name = AWSACCOUNT" > ~/.aws/config
      - aws s3 cp s3://$LAMBDA_BUCKET/$PROJECT/$DEPLOY_ENVIRONMENT/wait_deploy.sh . --profile target_acc
      - bash wait_deploy.sh $APPLICATION_NAME $DEPLOYMENT_GROUP
      - aws deploy create-deployment --application-name $APPLICATION_NAME --deployment-config-name CodeDeployDefault.ECSAllAtOnce --deployment-group-name $DEPLOYMENT_GROUP --description "Deployment ECS" --s3-location bucket=jaqu-shared-project-lambda-bucket,bundleType=yaml,key=$PROJECT/$DEPLOY_ENVIRONMENT/appspec.yaml --profile target_acc
    environment:
      AWS_ACCESS_KEY_ID:
        from_secret: jaqu_controlled_aws_access_key_id
      AWS_SECRET_ACCESS_KEY:
        from_secret: jaqu_controlled_aws_secret_access_key
      AWS_DEFAULT_REGION: eu-west-2
      APPLICATION_NAME: ntr-codedeploy-service-st
      DEPLOYMENT_GROUP: ntr-codedeploy-service-st
      AWS_ACCOUNT_ROLE: arn:aws:iam::072187228077:role/jaqu-controlledServiceRole
      PROJECT: ntr
      DEPLOY_ENVIRONMENT: st
      LAMBDA_BUCKET: jaqu-shared-project-lambda-bucket
    when:
      event:
        - push

  - name: await ecs rollout
    image: alpine:3.11.6
    environment:
      build_id_url: https://st-ntr-web.cleanairzone.defra.gov.uk/build_id
      build_id: ${DRONE_BUILD_NUMBER}
    commands:
      - apk add curl
      - sh ci-cd-resources/check_build_number.sh
    volumes:
      - name: docker_sock
        path: /var/run/docker.sock
    when:
      event:
        - push
  ################################################# End of ST Environment Steps ############################################################


---

#################################################### SIT Environment Steps ############################################################
kind: pipeline
type: docker
name: ntr-web-sit
trigger:
  branch:
    - release/*
  event:
    - pull_request
    - push
concurrency:
  limit: 2
volumes:
- name: docker_sock
  host:
    path: /var/run/docker.sock

steps:

  # Clean agent images and containers to prevent disk space overuse
  - name: clean agent
    image: docker:19.03.11-git
    commands:
    - docker system prune -f
    volumes:
      - name: docker_sock
        path: /var/run/docker.sock

  # Build docker image
  - name: build
    image: docker:19.03.11-git
    commands:
    - docker build -f Dockerfile.test -t test-national-taxi-register-frontend:latest .
    volumes:
      - name: docker_sock
        path: /var/run/docker.sock
    build_args:
      - AWS_REGION=eu-west-2
    depends_on:
      - clean agent

  # Trigger unit tests
  - name: unit tests
    image: test-national-taxi-register-frontend
    pull: never
    volumes:
      - name: docker_sock
        path: /var/run/docker.sock
    commands:
      - yarn install
      - rspec -f d
    depends_on:
      - build

  # Execute integration/scenario tests
  - name: integration tests
    image: test-national-taxi-register-frontend
    pull: never
    volumes:
      - name: docker_sock
        path: /var/run/docker.sock
    commands:
      - cucumber
    depends_on:
      - unit tests

  # Invoke static code analysis through Ruby libraries
  - name: static code analysis (Ruby)
    image: test-national-taxi-register-frontend
    pull: never
    commands:
      - rubocop
      - node_modules/.bin/stylelint 'app/javascript/**/*.(s)?scss'
    volumes:
      - name: docker_sock
        path: /var/run/docker.sock
    depends_on:
      - integration tests

  # Push built image to ECR registry
  - name: publish image to ecr
    image: plugins/ecr
    settings:
      access_key:
        from_secret: jaqu_controlled_service_aws_access_key_id
      secret_key:
        from_secret: jaqu_controlled_service_aws_secret_access_key
      repo: 311075478274.dkr.ecr.eu-west-2.amazonaws.com/ntr-repo
      registry: 311075478274.dkr.ecr.eu-west-2.amazonaws.com
      dockerfile: Dockerfile.build
      region: eu-west-2
      tags:
        - release
        - ${DRONE_BUILD_NUMBER}
      build_args:
        - secret_key_base=${DRONE_COMMIT}
        - AWS_REGION=eu-west-2
    when:
      event:
        - push
    depends_on:
      - static code analysis (Ruby)

  - name: clone iac
    image: hashicorp/terraform:0.12.23
    commands:
      - apk update && apk add bash
      - mkdir ~/.ssh
      - echo -e "$GIT_PRIVATE_SSH" > ~/.ssh/id_rsa
      - chmod 600 ~/.ssh/id_rsa
      - touch ~/.ssh/known_hosts
      - chmod 600 ~/.ssh/known_hosts
      - ssh-keyscan -H github.com > /etc/ssh/ssh_known_hosts 2> /dev/null
      - git clone git@github.com:InformedSolutions/JAQU-CAZ-IAC.git
      - cd JAQU-CAZ-IAC
      - git checkout controlled_sit
    environment:
      GIT_PRIVATE_SSH:
        from_secret: jaqu_lower_github_private_key
    depends_on:
      - static code analysis (Ruby)

  - name: plan terraform updates in sit
    image: hashicorp/terraform:0.12.23
    commands:
      - apk add --update bash python python-dev py-pip build-base jq
      - pip install awscli
      - cd JAQU-CAZ-IAC
      - cd terraform-iac/projects/ntr/layers/01.networking
      - PATH=$PATH:../../../../bin/
      - chmod +x ../../../../bin/tf
      - tf init
      - tf workspace select sit || tf workspace new sit
      - tf plan
      - cd ../02.backends
      - tf init
      - tf workspace select sit || tf workspace new sit
      - tf plan
      - cd ../04.web
      - tf init
      - tf workspace select sit || tf workspace new sit
      - tf plan
    environment:
      TF_VAR_access_key:
        from_secret: jaqu_controlled_aws_access_key_id
      TF_VAR_secret_key:
        from_secret: jaqu_controlled_aws_secret_access_key
      TF_VAR_s3_aws_access_key_id:
        from_secret: jaqu_controlled_aws_access_key_id
      TF_VAR_s3_aws_secret_access_key:
        from_secret: jaqu_controlled_aws_secret_access_key
      TF_VAR_master_access_key:
        from_secret: jaqu_master_aws_access_key_id
      TF_VAR_master_secret_key:
        from_secret: jaqu_master_aws_secret_access_key
      AWS_ACCESS_KEY_ID:
        from_secret: jaqu_controlled_aws_access_key_id
      AWS_SECRET_ACCESS_KEY:
        from_secret: jaqu_controlled_aws_secret_access_key
      AWS_DEFAULT_REGION: eu-west-2
      AWS_ACCOUNT_NAME: jaqu-controlled
      TF_VAR_build_number: ${DRONE_BUILD_NUMBER}
      TF_VAR_secret_key_base:
        from_secret: ntr_ruby_secret
      TF_VAR_google_analytics_id: UA-144774549-1
      TF_VAR_session_timeout: 15
      TF_VAR_feedback_url: https://defragroup.eu.qualtrics.com/jfe/form/SV_2iugBKyyYVyl0LX
      environment: sit
    when:
      event:
        - pull_request
    depends_on:
      - clone iac

  - name: plan terraform updates in sit2
    image: hashicorp/terraform:0.12.23
    commands:
      - apk add --update bash python python-dev py-pip build-base jq
      - pip install awscli
      - cd JAQU-CAZ-IAC
      - cd terraform-iac/projects/ntr/layers/01.networking
      - PATH=$PATH:../../../../bin/
      - chmod +x ../../../../bin/tf
      - tf init
      - tf workspace select sit2 || tf workspace new sit2
      - tf plan
      - cd ../02.backends
      - tf init
      - tf workspace select sit2 || tf workspace new sit2
      - tf plan
      - cd ../04.web
      - tf init
      - tf workspace select sit2 || tf workspace new sit2
      - tf plan
    environment:
      TF_VAR_access_key:
        from_secret: jaqu_controlled_aws_access_key_id
      TF_VAR_secret_key:
        from_secret: jaqu_controlled_aws_secret_access_key
      TF_VAR_s3_aws_access_key_id:
        from_secret: jaqu_controlled_aws_access_key_id
      TF_VAR_s3_aws_secret_access_key:
        from_secret: jaqu_controlled_aws_secret_access_key
      TF_VAR_master_access_key:
        from_secret: jaqu_master_aws_access_key_id
      TF_VAR_master_secret_key:
        from_secret: jaqu_master_aws_secret_access_key
      AWS_ACCESS_KEY_ID:
        from_secret: jaqu_controlled_aws_access_key_id
      AWS_SECRET_ACCESS_KEY:
        from_secret: jaqu_controlled_aws_secret_access_key
      AWS_DEFAULT_REGION: eu-west-2
      AWS_ACCOUNT_NAME: jaqu-controlled
      TF_VAR_build_number: ${DRONE_BUILD_NUMBER}
      TF_VAR_secret_key_base:
        from_secret: ntr_ruby_secret
      TF_VAR_google_analytics_id: UA-144774549-1
      TF_VAR_session_timeout: 15
      TF_VAR_feedback_url: https://defragroup.eu.qualtrics.com/jfe/form/SV_2iugBKyyYVyl0LX
      environment: sit2
    when:
      event:
        - pull_request
    depends_on:
      - plan terraform updates in sit

  - name: provisioning warning
    image: docker:19.03.11-git
    commands:
      - echo "Pipeline failed. If a deployment is being made for the first time into an environment terraform backends will not yet exist which means this is to be expected. If not terraform related, please see logs for further details"
    when:
      status:
        - failure

  # Invoke terraform scripts with tagged image number
  - name: deploy to sit
    image: hashicorp/terraform:0.12.23
    commands:
      - apk add --update bash python python-dev py-pip build-base jq
      - pip install awscli
      - cd JAQU-CAZ-IAC
      - cd terraform-iac/projects/ntr/layers/01.networking
      - PATH=$PATH:../../../../bin/
      - chmod +x ../../../../bin/tf
      - tf init
      - tf workspace select sit || tf workspace new sit
      - tf apply -auto-approve
      - cd ../02.backends
      - tf init
      - tf workspace select sit || tf workspace new sit
      - tf apply -auto-approve
      - cd ../04.web
      - tf init
      - tf workspace select sit || tf workspace new sit
      - tf apply -auto-approve
    environment:
      TF_VAR_access_key:
        from_secret: jaqu_controlled_aws_access_key_id
      TF_VAR_secret_key:
        from_secret: jaqu_controlled_aws_secret_access_key
      TF_VAR_s3_aws_access_key_id:
        from_secret: jaqu_controlled_aws_access_key_id
      TF_VAR_s3_aws_secret_access_key:
        from_secret: jaqu_controlled_aws_secret_access_key
      TF_VAR_master_access_key:
        from_secret: jaqu_master_aws_access_key_id
      TF_VAR_master_secret_key:
        from_secret: jaqu_master_aws_secret_access_key
      AWS_ACCESS_KEY_ID:
        from_secret: jaqu_controlled_aws_access_key_id
      AWS_SECRET_ACCESS_KEY:
        from_secret: jaqu_controlled_aws_secret_access_key
      GIT_PRIVATE_SSH:
        from_secret: jaqu_lower_github_private_key
      AWS_DEFAULT_REGION: eu-west-2
      AWS_ACCOUNT_NAME: jaqu-controlled
      TF_VAR_build_number: ${DRONE_BUILD_NUMBER}
      TF_VAR_secret_key_base:
        from_secret: ntr_ruby_secret
      TF_VAR_google_analytics_id: UA-144774549-1
      TF_VAR_session_timeout: 15
      TF_VAR_feedback_url: https://defragroup.eu.qualtrics.com/jfe/form/SV_2iugBKyyYVyl0LX
      environment: sit
    when:
      event:
        - push
    depends_on:
      - clone iac
      - publish image to ecr

  # Invoke terraform scripts with tagged image number
  - name: deploy to sit2
    image: hashicorp/terraform:0.12.23
    commands:
      - apk add --update bash python python-dev py-pip build-base jq
      - pip install awscli
      - cd JAQU-CAZ-IAC
      - cd terraform-iac/projects/ntr/layers/01.networking
      - PATH=$PATH:../../../../bin/
      - chmod +x ../../../../bin/tf
      - tf init
      - tf workspace select sit2 || tf workspace new sit2
      - tf apply -auto-approve
      - cd ../02.backends
      - tf init
      - tf workspace select sit2 || tf workspace new sit2
      - tf apply -auto-approve
      - cd ../04.web
      - tf init
      - tf workspace select sit2 || tf workspace new sit2
      - tf apply -auto-approve
    environment:
      TF_VAR_access_key:
        from_secret: jaqu_controlled_aws_access_key_id
      TF_VAR_secret_key:
        from_secret: jaqu_controlled_aws_secret_access_key
      TF_VAR_s3_aws_access_key_id:
        from_secret: jaqu_controlled_aws_access_key_id
      TF_VAR_s3_aws_secret_access_key:
        from_secret: jaqu_controlled_aws_secret_access_key
      TF_VAR_master_access_key:
        from_secret: jaqu_master_aws_access_key_id
      TF_VAR_master_secret_key:
        from_secret: jaqu_master_aws_secret_access_key
      AWS_ACCESS_KEY_ID:
        from_secret: jaqu_controlled_aws_access_key_id
      AWS_SECRET_ACCESS_KEY:
        from_secret: jaqu_controlled_aws_secret_access_key
      GIT_PRIVATE_SSH:
        from_secret: jaqu_lower_github_private_key
      AWS_DEFAULT_REGION: eu-west-2
      AWS_ACCOUNT_NAME: jaqu-controlled
      TF_VAR_build_number: ${DRONE_BUILD_NUMBER}
      TF_VAR_secret_key_base:
        from_secret: ntr_ruby_secret
      TF_VAR_google_analytics_id: UA-144774549-1
      TF_VAR_session_timeout: 15
      TF_VAR_feedback_url: https://defragroup.eu.qualtrics.com/jfe/form/SV_2iugBKyyYVyl0LX
      environment: sit2
    when:
      event:
        - push
    depends_on:
      - deploy to sit

  - name: codedeploy ui sit
    image: alpine:3.11.6
    commands:
      - apk add --update bash python python-dev py-pip build-base jq
      - pip install awscli
      - mkdir ~/.aws
      - echo -e "[profile target_acc]\nrole_arn = $AWS_ACCOUNT_ROLE\ncredential_source = Environment\nrole_session_name = AWSACCOUNT" > ~/.aws/config
      - aws s3 cp s3://$LAMBDA_BUCKET/$PROJECT/$DEPLOY_ENVIRONMENT/wait_deploy.sh . --profile target_acc
      - bash wait_deploy.sh $APPLICATION_NAME $DEPLOYMENT_GROUP
      - aws deploy create-deployment --application-name $APPLICATION_NAME --deployment-config-name CodeDeployDefault.ECSAllAtOnce --deployment-group-name $DEPLOYMENT_GROUP --description "Deployment ECS" --s3-location bucket=jaqu-shared-project-lambda-bucket,bundleType=yaml,key=$PROJECT/$DEPLOY_ENVIRONMENT/appspec.yaml --profile target_acc
    environment:
      AWS_ACCESS_KEY_ID:
        from_secret: jaqu_controlled_aws_access_key_id
      AWS_SECRET_ACCESS_KEY:
        from_secret: jaqu_controlled_aws_secret_access_key
      AWS_DEFAULT_REGION: eu-west-2
      APPLICATION_NAME: ntr-codedeploy-service-sit
      DEPLOYMENT_GROUP: ntr-codedeploy-service-sit
      AWS_ACCOUNT_ROLE: arn:aws:iam::072187228077:role/jaqu-controlledServiceRole
      PROJECT: ntr
      DEPLOY_ENVIRONMENT: sit
      LAMBDA_BUCKET: jaqu-shared-project-lambda-bucket
    when:
      event:
        - push
    depends_on:
      - deploy to sit

  - name: codedeploy ui sit2
    image: alpine:3.11.6
    commands:
      - apk add --update bash python python-dev py-pip build-base jq
      - pip install awscli
      - mkdir ~/.aws
      - echo -e "[profile target_acc]\nrole_arn = $AWS_ACCOUNT_ROLE\ncredential_source = Environment\nrole_session_name = AWSACCOUNT" > ~/.aws/config
      - aws s3 cp s3://$LAMBDA_BUCKET/$PROJECT/$DEPLOY_ENVIRONMENT/wait_deploy.sh . --profile target_acc
      - bash wait_deploy.sh $APPLICATION_NAME $DEPLOYMENT_GROUP
      - aws deploy create-deployment --application-name $APPLICATION_NAME --deployment-config-name CodeDeployDefault.ECSAllAtOnce --deployment-group-name $DEPLOYMENT_GROUP --description "Deployment ECS" --s3-location bucket=jaqu-shared-project-lambda-bucket,bundleType=yaml,key=$PROJECT/$DEPLOY_ENVIRONMENT/appspec.yaml --profile target_acc
    environment:
      AWS_ACCESS_KEY_ID:
        from_secret: jaqu_controlled_aws_access_key_id
      AWS_SECRET_ACCESS_KEY:
        from_secret: jaqu_controlled_aws_secret_access_key
      AWS_DEFAULT_REGION: eu-west-2
      APPLICATION_NAME: ntr-codedeploy-service-sit2
      DEPLOYMENT_GROUP: ntr-codedeploy-service-sit2
      AWS_ACCOUNT_ROLE: arn:aws:iam::072187228077:role/jaqu-controlledServiceRole
      PROJECT: ntr
      DEPLOY_ENVIRONMENT: sit2
      LAMBDA_BUCKET: jaqu-shared-project-lambda-bucket
    when:
      event:
        - push
    depends_on:
      - deploy to sit2

  - name: await ecs rollout
    image: docker:19.03.11-git
    environment:
      build_id_url: https://sit-ntr-web.cleanairzone.defra.gov.uk/build_id
      build_id: ${DRONE_BUILD_NUMBER}
    commands:
      - apk add curl
      - sh ci-cd-resources/check_build_number.sh
    volumes:
      - name: docker_sock
        path: /var/run/docker.sock
    when:
      event:
        - push
    depends_on:
      - codedeploy ui sit
        
  - name: await ecs rollout (sit2)
    image: docker:19.03.11-git
    environment:
      build_id_url: https://sit2-ntr-web.cleanairzone.defra.gov.uk/build_id
      build_id: ${DRONE_BUILD_NUMBER}
    commands:
      - apk add curl
      - sh ci-cd-resources/check_build_number.sh
    volumes:
      - name: docker_sock
        path: /var/run/docker.sock
    when:
      event:
        - push
    depends_on:
      - codedeploy ui sit2

  ################################################# End of SIT Environment Steps ############################################################

---

#################################################### Preprod Environment Steps ############################################################
kind: pipeline
type: docker
name: ntr-web-preprod
trigger:
  branch:
    - staging
  event:
    - pull_request
    - push
concurrency:
  limit: 2

steps:

  - name: clone iac
    image: hashicorp/terraform:0.12.23
    commands:
      - apk update && apk add bash
      - mkdir ~/.ssh
      - echo -e "$GIT_PRIVATE_SSH" > ~/.ssh/id_rsa
      - chmod 600 ~/.ssh/id_rsa
      - touch ~/.ssh/known_hosts
      - chmod 600 ~/.ssh/known_hosts
      - ssh-keyscan -H github.com > /etc/ssh/ssh_known_hosts 2> /dev/null
      - git clone git@github.com:InformedSolutions/JAQU-CAZ-IAC.git
      - cd JAQU-CAZ-IAC
      - git checkout staging_preprod
    environment:
      GIT_PRIVATE_SSH:
        from_secret: jaqu_lower_github_private_key   

  - name: plan terraform updates in preprod
    image: hashicorp/terraform:0.12.23
    commands:
      - apk add --update bash python python-dev py-pip build-base jq
      - pip install awscli
      - mkdir ~/.aws
      - echo -e "[profile target_acc]\nrole_arn = $SRC_AWS_ACCOUNT_ROLE\ncredential_source = Environment\nrole_session_name = AWSACCOUNT" > ~/.aws/config
      - TASKDEF=`aws ecs describe-services --profile target_acc --cluster ntr-cluster-sit  --services ntr-sit-ecs-service | jq --raw-output '.services[0].taskDefinition'`
      - export TF_VAR_build_number=`aws ecs describe-task-definition --profile target_acc --task-definition $TASKDEF | jq --raw-output '.taskDefinition.containerDefinitions[0].image' | cut -f 2 -d ':'`
      - cd JAQU-CAZ-IAC
      - cd terraform-iac/projects/ntr/layers/01.networking
      - PATH=$PATH:../../../../bin/
      - chmod +x ../../../../bin/tf
      - tf init
      - tf workspace select preprod || tf workspace new preprod
      - tf plan
      - cd ../02.backends
      - tf init
      - tf workspace select preprod || tf workspace new preprod
      - tf plan
      - cd ../04.web
      - tf init
      - tf workspace select preprod || tf workspace new preprod
      - tf plan
    environment:
      TF_VAR_access_key:
        from_secret: jaqu_staging_aws_access_key_id
      TF_VAR_secret_key:
        from_secret: jaqu_staging_aws_secret_access_key
      TF_VAR_s3_aws_access_key_id:
        from_secret: jaqu_staging_aws_access_key_id
      TF_VAR_s3_aws_secret_access_key:
        from_secret: jaqu_staging_aws_secret_access_key
      TF_VAR_master_access_key:
        from_secret: jaqu_master_aws_access_key_id
      TF_VAR_master_secret_key:
        from_secret: jaqu_master_aws_secret_access_key
      AWS_ACCESS_KEY_ID:
        from_secret: jaqu_staging_aws_access_key_id
      AWS_SECRET_ACCESS_KEY:
        from_secret: jaqu_staging_aws_secret_access_key
      AWS_DEFAULT_REGION: eu-west-2
      AWS_ACCOUNT_NAME: jaqu-staging
      SRC_AWS_ACCOUNT_ROLE: arn:aws:iam::072187228077:role/jaqu-controlledServiceRole
      TF_VAR_secret_key_base:
        from_secret: ntr_ruby_secret
      TF_VAR_google_analytics_id: UA-144774549-1
      TF_VAR_session_timeout: 15
      TF_VAR_feedback_url: https://defragroup.eu.qualtrics.com/jfe/form/SV_2iugBKyyYVyl0LX
      environment: preprod
    when:
      event:
        - pull_request
    depends_on:
      - clone iac

  - name: plan terraform updates in preprod2
    image: hashicorp/terraform:0.12.23
    commands:
      - apk add --update bash python python-dev py-pip build-base jq
      - pip install awscli
      - mkdir ~/.aws
      - echo -e "[profile target_acc]\nrole_arn = $SRC_AWS_ACCOUNT_ROLE\ncredential_source = Environment\nrole_session_name = AWSACCOUNT" > ~/.aws/config
      - TASKDEF=`aws ecs describe-services --profile target_acc --cluster ntr-cluster-sit  --services ntr-sit-ecs-service | jq --raw-output '.services[0].taskDefinition'`
      - export TF_VAR_build_number=`aws ecs describe-task-definition --profile target_acc --task-definition $TASKDEF | jq --raw-output '.taskDefinition.containerDefinitions[0].image' | cut -f 2 -d ':'`
      - cd JAQU-CAZ-IAC
      - cd terraform-iac/projects/ntr/layers/01.networking
      - PATH=$PATH:../../../../bin/
      - chmod +x ../../../../bin/tf
      - tf init
      - tf workspace select preprod2 || tf workspace new preprod2
      - tf plan
      - cd ../02.backends
      - tf init
      - tf workspace select preprod2 || tf workspace new preprod2
      - tf plan
      - cd ../04.web
      - tf init
      - tf workspace select preprod2 || tf workspace new preprod2
      - tf plan
    environment:
      TF_VAR_access_key:
        from_secret: jaqu_staging_aws_access_key_id
      TF_VAR_secret_key:
        from_secret: jaqu_staging_aws_secret_access_key
      TF_VAR_s3_aws_access_key_id:
        from_secret: jaqu_staging_aws_access_key_id
      TF_VAR_s3_aws_secret_access_key:
        from_secret: jaqu_staging_aws_secret_access_key
      TF_VAR_master_access_key:
        from_secret: jaqu_master_aws_access_key_id
      TF_VAR_master_secret_key:
        from_secret: jaqu_master_aws_secret_access_key
      AWS_ACCESS_KEY_ID:
        from_secret: jaqu_staging_aws_access_key_id
      AWS_SECRET_ACCESS_KEY:
        from_secret: jaqu_staging_aws_secret_access_key
      AWS_DEFAULT_REGION: eu-west-2
      AWS_ACCOUNT_NAME: jaqu-staging
      SRC_AWS_ACCOUNT_ROLE: arn:aws:iam::072187228077:role/jaqu-controlledServiceRole
      TF_VAR_secret_key_base:
        from_secret: ntr_ruby_secret
      TF_VAR_google_analytics_id: UA-144774549-1
      TF_VAR_session_timeout: 15
      TF_VAR_feedback_url: https://defragroup.eu.qualtrics.com/jfe/form/SV_2iugBKyyYVyl0LX
      environment: preprod2
    when:
      event:
        - pull_request
    depends_on:
      - plan terraform updates in preprod

  - name: provisioning warning
    image: docker:19.03.11-git
    commands:
      - echo "Pipeline failed. If a deployment is being made for the first time into an environment terraform backends will not yet exist which means this is to be expected. If not terraform related, please see logs for further details"
    when:
      status:
        - failure

  # Invoke terraform scripts with tagged image number
  - name: deploy to preprod
    image: hashicorp/terraform:0.12.23
    commands:
      - apk add --update bash python python-dev py-pip build-base jq
      - pip install awscli
      - mkdir ~/.aws
      - echo -e "[profile target_acc]\nrole_arn = $SRC_AWS_ACCOUNT_ROLE\ncredential_source = Environment\nrole_session_name = AWSACCOUNT" > ~/.aws/config
      - TASKDEF=`aws ecs describe-services --profile target_acc --cluster ntr-cluster-sit  --services ntr-sit-ecs-service | jq --raw-output '.services[0].taskDefinition'`
      - export TF_VAR_build_number=`aws ecs describe-task-definition --profile target_acc --task-definition $TASKDEF | jq --raw-output '.taskDefinition.containerDefinitions[0].image' | cut -f 2 -d ':'`
      - cd JAQU-CAZ-IAC
        - cd terraform-iac/projects/ntr/layers/01.networking
      - PATH=$PATH:../../../../bin/
      - chmod +x ../../../../bin/tf
      - tf init
      - tf workspace select preprod || tf workspace new preprod
      - tf apply -auto-approve
      - cd ../02.backends
      - tf init
      - tf workspace select preprod || tf workspace new preprod
      - tf apply -auto-approve
      - cd ../04.web
      - tf init
      - tf workspace select preprod || tf workspace new preprod
      - tf apply -auto-approve
    environment:
      TF_VAR_access_key:
        from_secret: jaqu_staging_aws_access_key_id
      TF_VAR_secret_key:
        from_secret: jaqu_staging_aws_secret_access_key
      TF_VAR_s3_aws_access_key_id:
        from_secret: jaqu_staging_aws_access_key_id
      TF_VAR_s3_aws_secret_access_key:
        from_secret: jaqu_staging_aws_secret_access_key
      TF_VAR_master_access_key:
        from_secret: jaqu_master_aws_access_key_id
      TF_VAR_master_secret_key:
        from_secret: jaqu_master_aws_secret_access_key
      AWS_ACCESS_KEY_ID:
        from_secret: jaqu_staging_aws_access_key_id
      AWS_SECRET_ACCESS_KEY:
        from_secret: jaqu_staging_aws_secret_access_key
      AWS_DEFAULT_REGION: eu-west-2
      AWS_ACCOUNT_NAME: jaqu-staging
      SRC_AWS_ACCOUNT_ROLE: arn:aws:iam::072187228077:role/jaqu-controlledServiceRole
      TF_VAR_secret_key_base:
        from_secret: ntr_ruby_secret
      TF_VAR_google_analytics_id: UA-144774549-1
      TF_VAR_session_timeout: 15
      TF_VAR_feedback_url: https://defragroup.eu.qualtrics.com/jfe/form/SV_2iugBKyyYVyl0LX
      environment: preprod
    when:
      event:
        - push
    depends_on:
      - clone iac

  # Invoke terraform scripts with tagged image number
  - name: deploy to preprod2
    image: hashicorp/terraform:0.12.23
    commands:
      - apk add --update bash python python-dev py-pip build-base jq
      - pip install awscli
      - mkdir ~/.aws
      - echo -e "[profile target_acc]\nrole_arn = $SRC_AWS_ACCOUNT_ROLE\ncredential_source = Environment\nrole_session_name = AWSACCOUNT" > ~/.aws/config
      - TASKDEF=`aws ecs describe-services --profile target_acc --cluster ntr-cluster-sit  --services ntr-sit-ecs-service | jq --raw-output '.services[0].taskDefinition'`
      - export TF_VAR_build_number=`aws ecs describe-task-definition --profile target_acc --task-definition $TASKDEF | jq --raw-output '.taskDefinition.containerDefinitions[0].image' | cut -f 2 -d ':'`
      - cd JAQU-CAZ-IAC
        - cd terraform-iac/projects/ntr/layers/01.networking
      - PATH=$PATH:../../../../bin/
      - chmod +x ../../../../bin/tf
      - tf init
      - tf workspace select preprod2 || tf workspace new preprod2
      - tf apply -auto-approve
      - cd ../02.backends
      - tf init
      - tf workspace select preprod2 || tf workspace new preprod2
      - tf apply -auto-approve
      - cd ../04.web
      - tf init
      - tf workspace select preprod2 || tf workspace new preprod2
      - tf apply -auto-approve
    environment:
      TF_VAR_access_key:
        from_secret: jaqu_staging_aws_access_key_id
      TF_VAR_secret_key:
        from_secret: jaqu_staging_aws_secret_access_key
      TF_VAR_s3_aws_access_key_id:
        from_secret: jaqu_staging_aws_access_key_id
      TF_VAR_s3_aws_secret_access_key:
        from_secret: jaqu_staging_aws_secret_access_key
      TF_VAR_master_access_key:
        from_secret: jaqu_master_aws_access_key_id
      TF_VAR_master_secret_key:
        from_secret: jaqu_master_aws_secret_access_key
      AWS_ACCESS_KEY_ID:
        from_secret: jaqu_staging_aws_access_key_id
      AWS_SECRET_ACCESS_KEY:
        from_secret: jaqu_staging_aws_secret_access_key
      AWS_DEFAULT_REGION: eu-west-2
      AWS_ACCOUNT_NAME: jaqu-staging
      SRC_AWS_ACCOUNT_ROLE: arn:aws:iam::072187228077:role/jaqu-controlledServiceRole
      TF_VAR_secret_key_base:
        from_secret: ntr_ruby_secret
      TF_VAR_google_analytics_id: UA-144774549-1
      TF_VAR_session_timeout: 15
      TF_VAR_feedback_url: https://defragroup.eu.qualtrics.com/jfe/form/SV_2iugBKyyYVyl0LX
      environment: preprod2
    when:
      event:
        - push
    depends_on:
      - deploy to preprod

  - name: codedeploy ui preprod
    image: alpine:3.11.6
    commands:
      - apk add --update bash python python-dev py-pip build-base jq
      - pip install awscli
      - mkdir ~/.aws
      - echo -e "[profile target_acc]\nrole_arn = $AWS_ACCOUNT_ROLE\ncredential_source = Environment\nrole_session_name = AWSACCOUNT" > ~/.aws/config
      - aws s3 cp s3://$LAMBDA_BUCKET/$PROJECT/$DEPLOY_ENVIRONMENT/wait_deploy.sh . --profile target_acc
      - bash wait_deploy.sh $APPLICATION_NAME $DEPLOYMENT_GROUP
      - aws deploy create-deployment --application-name $APPLICATION_NAME --deployment-config-name CodeDeployDefault.ECSAllAtOnce --deployment-group-name $DEPLOYMENT_GROUP --description "Deployment ECS" --s3-location bucket=jaqu-shared-project-lambda-bucket,bundleType=yaml,key=$PROJECT/$DEPLOY_ENVIRONMENT/appspec.yaml --profile target_acc
    environment:
      AWS_ACCESS_KEY_ID:
        from_secret: jaqu_staging_aws_access_key_id
      AWS_SECRET_ACCESS_KEY:
        from_secret: jaqu_staging_aws_secret_access_key
      AWS_DEFAULT_REGION: eu-west-2
      APPLICATION_NAME: ntr-codedeploy-service-preprod
      DEPLOYMENT_GROUP: ntr-codedeploy-service-preprod
      AWS_ACCOUNT_ROLE: arn:aws:iam::360470905865:role/jaqu-stagingServiceRole
      PROJECT: ntr
      DEPLOY_ENVIRONMENT: preprod
      LAMBDA_BUCKET: jaqu-shared-project-lambda-bucket
    when:
      event:
        - push
    depends_on:
      - deploy to preprod

  - name: codedeploy ui preprod2
    image: alpine:3.11.6
    commands:
      - apk add --update bash python python-dev py-pip build-base jq
      - pip install awscli
      - mkdir ~/.aws
      - echo -e "[profile target_acc]\nrole_arn = $AWS_ACCOUNT_ROLE\ncredential_source = Environment\nrole_session_name = AWSACCOUNT" > ~/.aws/config
      - aws s3 cp s3://$LAMBDA_BUCKET/$PROJECT/$DEPLOY_ENVIRONMENT/wait_deploy.sh . --profile target_acc
      - bash wait_deploy.sh $APPLICATION_NAME $DEPLOYMENT_GROUP
      - aws deploy create-deployment --application-name $APPLICATION_NAME --deployment-config-name CodeDeployDefault.ECSAllAtOnce --deployment-group-name $DEPLOYMENT_GROUP --description "Deployment ECS" --s3-location bucket=jaqu-shared-project-lambda-bucket,bundleType=yaml,key=$PROJECT/$DEPLOY_ENVIRONMENT/appspec.yaml --profile target_acc
    environment:
      AWS_ACCESS_KEY_ID:
        from_secret: jaqu_staging_aws_access_key_id
      AWS_SECRET_ACCESS_KEY:
        from_secret: jaqu_staging_aws_secret_access_key
      AWS_DEFAULT_REGION: eu-west-2
      APPLICATION_NAME: ntr-codedeploy-service-preprod
      DEPLOYMENT_GROUP: ntr-codedeploy-service-preprod
      AWS_ACCOUNT_ROLE: arn:aws:iam::360470905865:role/jaqu-stagingServiceRole
      PROJECT: ntr
      DEPLOY_ENVIRONMENT: preprod2
      LAMBDA_BUCKET: jaqu-shared-project-lambda-bucket
    when:
      event:
        - push
    depends_on:
      - deploy to preprod2

  - name: await ecs rollout
    image: alpine:3.11.6
    environment:
      build_id_url: https://preprod-ntr-web.cleanairzone.defra.gov.uk/build_id
      SRC_AWS_ACCOUNT_ROLE: arn:aws:iam::072187228077:role/jaqu-controlledServiceRole
      AWS_ACCESS_KEY_ID:
        from_secret: jaqu_controlled_aws_access_key_id
      AWS_SECRET_ACCESS_KEY:
        from_secret: jaqu_controlled_aws_secret_access_key
      AWS_DEFAULT_REGION: eu-west-2
    commands:
      - apk add --update bash python python-dev py-pip build-base jq
      - pip install awscli
      - mkdir ~/.aws
      - echo -e "[profile target_acc]\nrole_arn = $SRC_AWS_ACCOUNT_ROLE\ncredential_source = Environment\nrole_session_name = AWSACCOUNT" > ~/.aws/config
      - TASKDEF=`aws ecs describe-services --profile target_acc --cluster ntr-cluster-sit  --services ntr-sit-ecs-service | jq --raw-output '.services[0].taskDefinition'`
      - export build_id=`aws ecs describe-task-definition --profile target_acc --task-definition $TASKDEF | jq --raw-output '.taskDefinition.containerDefinitions[0].image' | cut -f 2 -d ':'`
      - apk add curl
      - sh ci-cd-resources/check_build_number.sh
    volumes:
      - name: docker_sock
        path: /var/run/docker.sock
    when:
      event:
        - push
    depends_on:
      - codedeploy ui preprod

  - name: await ecs rollout (preprod2)
    image: alpine:3.11.6
    environment:
      build_id_url: https://preprod2-ntr-web.cleanairzone.defra.gov.uk/build_id
      SRC_AWS_ACCOUNT_ROLE: arn:aws:iam::072187228077:role/jaqu-controlledServiceRole
      AWS_ACCESS_KEY_ID:
        from_secret: jaqu_controlled_aws_access_key_id
      AWS_SECRET_ACCESS_KEY:
        from_secret: jaqu_controlled_aws_secret_access_key
      AWS_DEFAULT_REGION: eu-west-2
    commands:
      - apk add --update bash python python-dev py-pip build-base jq
      - pip install awscli
      - mkdir ~/.aws
      - echo -e "[profile target_acc]\nrole_arn = $SRC_AWS_ACCOUNT_ROLE\ncredential_source = Environment\nrole_session_name = AWSACCOUNT" > ~/.aws/config
      - TASKDEF=`aws ecs describe-services --profile target_acc --cluster ntr-cluster-sit  --services ntr-sit-ecs-service | jq --raw-output '.services[0].taskDefinition'`
      - export build_id=`aws ecs describe-task-definition --profile target_acc --task-definition $TASKDEF | jq --raw-output '.taskDefinition.containerDefinitions[0].image' | cut -f 2 -d ':'`
      - apk add curl
      - sh ci-cd-resources/check_build_number.sh
    volumes:
      - name: docker_sock
        path: /var/run/docker.sock
    when:
      event:
        - push
    depends_on:
      - codedeploy ui preprod2

  ################################################# End of Preprod Environment Steps ############################################################

---
#################################################### UAT Environment Steps ############################################################

kind: pipeline
type: docker
name: ntr-web-uat
trigger:
  branch:
    -  uat/*
  event:
    - pull_request
    - push
concurrency:
  limit: 1
volumes:
- name: docker_sock
  host:
    path: /var/run/docker.sock

steps:

  # Clean agent images and containers to prevent disk space overuse
  - name: clean agent
    image: docker:19.03.11-git
    commands:
    - docker system prune -f
    volumes:
      - name: docker_sock
        path: /var/run/docker.sock

  # Build docker image
  - name: build
    image: docker:19.03.11-git
    commands:
    - docker build -f Dockerfile.test -t test-national-taxi-register-frontend:latest .
    volumes:
      - name: docker_sock
        path: /var/run/docker.sock
    build_args:
      - AWS_REGION=eu-west-2


  # Trigger unit tests
  - name: unit tests
    image: test-national-taxi-register-frontend
    pull: never
    volumes:
      - name: docker_sock
        path: /var/run/docker.sock
    commands:
      - yarn install
      - rspec -f d

  # Execute integration/scenario tests
  - name: integration tests
    image: test-national-taxi-register-frontend
    pull: never
    volumes:
      - name: docker_sock
        path: /var/run/docker.sock
    commands:
      - cucumber

  # Invoke static code analysis through Ruby libraries
  - name: static code analysis (Ruby)
    image: test-national-taxi-register-frontend
    pull: never
    commands:
      - rubocop
      - node_modules/.bin/stylelint 'app/javascript/**/*.(s)?scss'
    volumes:
      - name: docker_sock
        path: /var/run/docker.sock

  # Invoke security analysis through Ruby libraries
  - name: security tests (Ruby)
    image: test-national-taxi-register-frontend
    pull: never
    commands:
      - bundle audit check --update
      - yarn run improved-yarn-audit --retry-on-network-failure
      - brakeman
    volumes:
      - name: docker_sock
        path: /var/run/docker.sock


 # Push built image to ECR registry
  - name: publish uat image to ecr
    image: plugins/ecr
    settings:
      access_key:
        from_secret: jaqu_staging_service_aws_access_key_id
      secret_key:
        from_secret: jaqu_staging_service_aws_secret_access_key
      repo: 311075478274.dkr.ecr.eu-west-2.amazonaws.com/ntr-repo
      registry: 311075478274.dkr.ecr.eu-west-2.amazonaws.com
      dockerfile: Dockerfile.build
      region: eu-west-2
      tags:
        - release
        - hotfix
        - ${DRONE_BUILD_NUMBER}
      build_args:
        - secret_key_base=${DRONE_COMMIT}
    when:
      event:
        - push


  - name: plan terraform updates in uat
    image: hashicorp/terraform:0.12.23
    commands:
      - apk add --update bash python python-dev py-pip build-base jq
      - pip install awscli
      - mkdir ~/.ssh
      - echo -e "$GIT_PRIVATE_SSH" > ~/.ssh/id_rsa
      - chmod 600 ~/.ssh/id_rsa
      - touch ~/.ssh/known_hosts
      - chmod 600 ~/.ssh/known_hosts
      - ssh-keyscan -H github.com > /etc/ssh/ssh_known_hosts 2> /dev/null
      - git clone git@github.com:InformedSolutions/JAQU-CAZ-IAC.git
      - cd JAQU-CAZ-IAC
      - git checkout staging_uat
      - cd terraform-iac/projects/ntr/layers/01.networking
      - PATH=$PATH:../../../../bin/
      - chmod +x ../../../../bin/tf
      - tf init
      - tf workspace select uat || tf workspace new uat
      - tf plan
      - cd ../02.backends
      - tf init
      - tf workspace select uat|| tf workspace new uat
      - tf plan
      - cd ../04.web
      - tf init
      - tf workspace select uat || tf workspace new uat
      - tf plan

    environment:
      TF_VAR_access_key:
        from_secret: jaqu_staging_aws_access_key_id
      TF_VAR_secret_key:
        from_secret: jaqu_staging_aws_secret_access_key
      TF_VAR_s3_aws_access_key_id:
        from_secret: jaqu_staging_aws_access_key_id
      TF_VAR_s3_aws_secret_access_key:
        from_secret: jaqu_staging_aws_secret_access_key
      TF_VAR_master_access_key:
        from_secret: jaqu_master_aws_access_key_id
      TF_VAR_master_secret_key:
        from_secret: jaqu_master_aws_secret_access_key
      AWS_ACCESS_KEY_ID:
        from_secret: jaqu_staging_aws_access_key_id
      AWS_SECRET_ACCESS_KEY:
        from_secret: jaqu_staging_aws_secret_access_key
      GIT_PRIVATE_SSH:
        from_secret: jaqu_lower_github_private_key
      AWS_DEFAULT_REGION: eu-west-2
      AWS_ACCOUNT_NAME: jaqu-staging
      TF_VAR_build_number: ${DRONE_BUILD_NUMBER}
      TF_VAR_secret_key_base:
        from_secret: ntr_ruby_secret
      TF_VAR_google_analytics_id: UA-144774549-1
      TF_VAR_session_timeout: 15
      TF_VAR_feedback_url: https://defragroup.eu.qualtrics.com/jfe/form/SV_2iugBKyyYVyl0LX
      environment: uat
    when:
      event:
        - pull_request

  - name: provisioning warning
    image: docker:19.03.11-git
    commands:
      - echo "Pipeline failed. If a deployment is being made for the first time into an environment terraform backends will not yet exist which means this is to be expected. If not terraform related, please see logs for further details"
    when:
      status:
        - failure

  # Invoke terraform scripts with tagged image number
  - name: deploy to uat
    image: hashicorp/terraform:0.12.23
    commands:
      - apk add --update bash python python-dev py-pip build-base jq
      - pip install awscli
      - mkdir ~/.ssh
      - echo -e "$GIT_PRIVATE_SSH" > ~/.ssh/id_rsa
      - chmod 600 ~/.ssh/id_rsa
      - touch ~/.ssh/known_hosts
      - chmod 600 ~/.ssh/known_hosts
      - ssh-keyscan -H github.com > /etc/ssh/ssh_known_hosts 2> /dev/null
      - git clone git@github.com:InformedSolutions/JAQU-CAZ-IAC.git
      - cd JAQU-CAZ-IAC
      - git checkout staging_uat
      - cd terraform-iac/projects/ntr/layers/01.networking
      - PATH=$PATH:../../../../bin/
      - chmod +x ../../../../bin/tf
      - tf init
      - tf workspace select uat || tf workspace new uat
      - tf apply -auto-approve
      - cd ../02.backends
      - tf init
      - tf workspace select uat || tf workspace new uat
      - tf apply -auto-approve
      - cd ../04.web
      - tf init
      - tf workspace select uat || tf workspace new uat
      - tf apply -auto-approve
    environment:
      TF_VAR_access_key:
        from_secret: jaqu_staging_aws_access_key_id
      TF_VAR_secret_key:
        from_secret: jaqu_staging_aws_secret_access_key
      TF_VAR_s3_aws_access_key_id:
        from_secret: jaqu_staging_aws_access_key_id
      TF_VAR_s3_aws_secret_access_key:
        from_secret: jaqu_staging_aws_secret_access_key
      TF_VAR_master_access_key:
        from_secret: jaqu_master_aws_access_key_id
      TF_VAR_master_secret_key:
        from_secret: jaqu_master_aws_secret_access_key
      AWS_ACCESS_KEY_ID:
        from_secret: jaqu_staging_aws_access_key_id
      AWS_SECRET_ACCESS_KEY:
        from_secret: jaqu_staging_aws_secret_access_key
      GIT_PRIVATE_SSH:
        from_secret: jaqu_lower_github_private_key
      AWS_DEFAULT_REGION: eu-west-2
      AWS_ACCOUNT_NAME: jaqu-staging
      TF_VAR_build_number: ${DRONE_BUILD_NUMBER}
      TF_VAR_secret_key_base:
        from_secret: ntr_ruby_secret
      TF_VAR_google_analytics_id: UA-144774549-1
      TF_VAR_session_timeout: 15
      TF_VAR_feedback_url: https://defragroup.eu.qualtrics.com/jfe/form/SV_2iugBKyyYVyl0LX
      environment: uat
    when:
      event:
        - push

  - name: codedeploy ui uat
    image: alpine:3.11.6
    commands:
      - apk add --update bash python python-dev py-pip build-base jq
      - pip install awscli
      - mkdir ~/.aws
      - echo -e "[profile target_acc]\nrole_arn = $AWS_ACCOUNT_ROLE\ncredential_source = Environment\nrole_session_name = AWSACCOUNT" > ~/.aws/config
      - aws s3 cp s3://$LAMBDA_BUCKET/$PROJECT/$DEPLOY_ENVIRONMENT/wait_deploy.sh . --profile target_acc
      - bash wait_deploy.sh $APPLICATION_NAME $DEPLOYMENT_GROUP
      - aws deploy create-deployment --application-name $APPLICATION_NAME --deployment-config-name CodeDeployDefault.ECSAllAtOnce --deployment-group-name $DEPLOYMENT_GROUP --description "Deployment ECS" --s3-location bucket=jaqu-shared-project-lambda-bucket,bundleType=yaml,key=$PROJECT/$DEPLOY_ENVIRONMENT/appspec.yaml --profile target_acc
    environment:
      AWS_ACCESS_KEY_ID:
        from_secret: jaqu_staging_aws_access_key_id
      AWS_SECRET_ACCESS_KEY:
        from_secret: jaqu_staging_aws_secret_access_key
      AWS_DEFAULT_REGION: eu-west-2
      APPLICATION_NAME: ntr-codedeploy-service-uat
      DEPLOYMENT_GROUP: ntr-codedeploy-service-uat
      AWS_ACCOUNT_ROLE: arn:aws:iam::360470905865:role/jaqu-stagingServiceRole
      PROJECT: ntr
      DEPLOY_ENVIRONMENT: uat
      LAMBDA_BUCKET: jaqu-shared-project-lambda-bucket
    when:
      event:
        - push

  - name: await ecs rollout
    image: alpine:3.11.6
    environment:
      build_id_url: https://uat-upload.taxiphvdata.co.uk/build_id
      build_id: ${DRONE_BUILD_NUMBER}
    commands:
      - apk add curl
      - sh ci-cd-resources/check_build_number.sh
    volumes:
      - name: docker_sock
        path: /var/run/docker.sock
    when:
      event:
        - push
  ################################################# End of UAT Environment Steps ############################################################

---

#################################################### Prod Environment Steps ############################################################
kind: pipeline
type: docker
name: ntr-web-prod
trigger:
  branch:
    - master
  event:
    - pull_request
    - push
concurrency:
  limit: 1

steps:

  - name: plan terraform updates in prod
    image: hashicorp/terraform:0.12.23
    commands:
      - apk add --update bash python python-dev py-pip build-base jq
      - pip install awscli
      - mkdir ~/.aws
      - echo -e "[profile target_acc]\nrole_arn = $SRC_AWS_ACCOUNT_ROLE\ncredential_source = Environment\nrole_session_name = AWSACCOUNT" > ~/.aws/config
      - TASKDEF=`aws ecs describe-services --profile target_acc --cluster ntr-cluster-preprod  --services ntr-preprod-ecs-service | jq --raw-output '.services[0].taskDefinition'`
      - export TF_VAR_build_number=`aws ecs describe-task-definition --profile target_acc --task-definition $TASKDEF | jq --raw-output '.taskDefinition.containerDefinitions[0].image' | cut -f 2 -d ':'`
      - mkdir ~/.ssh
      - echo -e "$GIT_PRIVATE_SSH" > ~/.ssh/id_rsa
      - chmod 600 ~/.ssh/id_rsa
      - touch ~/.ssh/known_hosts
      - chmod 600 ~/.ssh/known_hosts
      - ssh-keyscan -H github.com > /etc/ssh/ssh_known_hosts 2> /dev/null
      - git clone git@github.com:InformedSolutions/JAQU-CAZ-IAC.git
      - cd JAQU-CAZ-IAC
      - git checkout prod_live
      - cd terraform-iac/projects/ntr/layers/01.networking
      - PATH=$PATH:../../../../bin/
      - chmod +x ../../../../bin/tf
      - tf init
      - tf workspace select prod || tf workspace new prod
      - tf plan
      - cd ../02.backends
      - tf init
      - tf workspace select prod || tf workspace new prod
      - tf plan
      - cd ../04.web
      - tf init
      - tf workspace select prod || tf workspace new prod
      - tf plan
    environment:
      TF_VAR_access_key:
        from_secret: jaqu_prod_aws_access_key_id
      TF_VAR_secret_key:
        from_secret: jaqu_prod_aws_secret_access_key
      TF_VAR_s3_aws_access_key_id:
        from_secret: jaqu_prod_aws_access_key_id
      TF_VAR_s3_aws_secret_access_key:
        from_secret: jaqu_prod_aws_secret_access_key
      TF_VAR_master_access_key:
        from_secret: jaqu_master_aws_access_key_id
      TF_VAR_master_secret_key:
        from_secret: jaqu_master_aws_secret_access_key
      AWS_ACCESS_KEY_ID:
        from_secret: jaqu_prod_aws_access_key_id
      AWS_SECRET_ACCESS_KEY:
        from_secret: jaqu_prod_aws_secret_access_key
      GIT_PRIVATE_SSH:
        from_secret: jaqu_lower_github_private_key
      AWS_DEFAULT_REGION: eu-west-2
      AWS_ACCOUNT_NAME: jaqu-prod
      SRC_AWS_ACCOUNT_ROLE: arn:aws:iam::360470905865:role/jaqu-stagingServiceRole
      TF_VAR_secret_key_base:
        from_secret: ntr_ruby_secret
      TF_VAR_google_analytics_id: UA-150934733-1
      TF_VAR_session_timeout: 15
      TF_VAR_feedback_url: https://defragroup.eu.qualtrics.com/jfe/form/SV_0iVduRjEHUkoEFD
      environment: prod
    when:
      event:
        - pull_request

  - name: provisioning warning
    image: docker:19.03.11-git
    commands:
      - echo "Pipeline failed. If a deployment is being made for the first time into an environment terraform backends will not yet exist which means this is to be expected. If not terraform related, please see logs for further details"
    when:
      status:
        - failure

  # Invoke terraform scripts with tagged image number
  - name: deploy to prod
    image: hashicorp/terraform:0.12.23
    commands:
      - apk add --update bash python python-dev py-pip build-base jq
      - pip install awscli
      - mkdir ~/.aws
      - echo -e "[profile target_acc]\nrole_arn = $SRC_AWS_ACCOUNT_ROLE\ncredential_source = Environment\nrole_session_name = AWSACCOUNT" > ~/.aws/config
      - TASKDEF=`aws ecs describe-services --profile target_acc --cluster ntr-cluster-preprod  --services ntr-preprod-ecs-service | jq --raw-output '.services[0].taskDefinition'`
      - export TF_VAR_build_number=`aws ecs describe-task-definition --profile target_acc --task-definition $TASKDEF | jq --raw-output '.taskDefinition.containerDefinitions[0].image' | cut -f 2 -d ':'`
      - mkdir ~/.ssh
      - echo -e "$GIT_PRIVATE_SSH" > ~/.ssh/id_rsa
      - chmod 600 ~/.ssh/id_rsa
      - touch ~/.ssh/known_hosts
      - chmod 600 ~/.ssh/known_hosts
      - ssh-keyscan -H github.com > /etc/ssh/ssh_known_hosts 2> /dev/null
      - git clone git@github.com:InformedSolutions/JAQU-CAZ-IAC.git
      - cd JAQU-CAZ-IAC
      - git checkout prod_live
      - cd terraform-iac/projects/ntr/layers/01.networking
      - PATH=$PATH:../../../../bin/
      - chmod +x ../../../../bin/tf
      - tf init
      - tf workspace select prod || tf workspace new prod
      - tf apply -auto-approve
      - cd ../02.backends
      - tf init
      - tf workspace select prod || tf workspace new prod
      - tf apply -auto-approve
      - cd ../04.web
      - tf init
      - tf workspace select prod || tf workspace new prod
      - tf apply -auto-approve
    environment:
      TF_VAR_access_key:
        from_secret: jaqu_prod_aws_access_key_id
      TF_VAR_secret_key:
        from_secret: jaqu_prod_aws_secret_access_key
      TF_VAR_s3_aws_access_key_id:
        from_secret: jaqu_prod_aws_access_key_id
      TF_VAR_s3_aws_secret_access_key:
        from_secret: jaqu_prod_aws_secret_access_key
      TF_VAR_master_access_key:
        from_secret: jaqu_master_aws_access_key_id
      TF_VAR_master_secret_key:
        from_secret: jaqu_master_aws_secret_access_key
      AWS_ACCESS_KEY_ID:
        from_secret: jaqu_prod_aws_access_key_id
      AWS_SECRET_ACCESS_KEY:
        from_secret: jaqu_prod_aws_secret_access_key
      GIT_PRIVATE_SSH:
        from_secret: jaqu_lower_github_private_key
      AWS_DEFAULT_REGION: eu-west-2
      AWS_ACCOUNT_NAME: jaqu-prod
      SRC_AWS_ACCOUNT_ROLE: arn:aws:iam::360470905865:role/jaqu-stagingServiceRole
      TF_VAR_secret_key_base:
        from_secret: ntr_ruby_secret
      TF_VAR_google_analytics_id: UA-150934733-1
      TF_VAR_session_timeout: 15
      TF_VAR_feedback_url: https://defragroup.eu.qualtrics.com/jfe/form/SV_0iVduRjEHUkoEFD
      environment: prod
    when:
      event:
        - push

  - name: codedeploy ui prod
    image: alpine:3.11.6
    commands:
      - apk add --update bash python python-dev py-pip build-base jq
      - pip install awscli
      - mkdir ~/.aws
      - echo -e "[profile target_acc]\nrole_arn = $AWS_ACCOUNT_ROLE\ncredential_source = Environment\nrole_session_name = AWSACCOUNT" > ~/.aws/config
      - aws s3 cp s3://$LAMBDA_BUCKET/$PROJECT/$DEPLOY_ENVIRONMENT/wait_deploy.sh . --profile target_acc
      - bash wait_deploy.sh $APPLICATION_NAME $DEPLOYMENT_GROUP
      - aws deploy create-deployment --application-name $APPLICATION_NAME --deployment-config-name CodeDeployDefault.ECSAllAtOnce --deployment-group-name $DEPLOYMENT_GROUP --description "Deployment ECS" --s3-location bucket=jaqu-shared-project-lambda-bucket,bundleType=yaml,key=$PROJECT/$DEPLOY_ENVIRONMENT/appspec.yaml --profile target_acc
    environment:
      AWS_ACCESS_KEY_ID:
        from_secret: jaqu_prod_aws_access_key_id
      AWS_SECRET_ACCESS_KEY:
        from_secret: jaqu_prod_aws_secret_access_key
      AWS_DEFAULT_REGION: eu-west-2
      APPLICATION_NAME: ntr-codedeploy-service-prod
      DEPLOYMENT_GROUP: ntr-codedeploy-service-prod
      AWS_ACCOUNT_ROLE: arn:aws:iam::286199435714:role/jaqu-prodServiceRole
      PROJECT: ntr
      DEPLOY_ENVIRONMENT: prod
      LAMBDA_BUCKET: jaqu-shared-project-lambda-bucket
    when:
      event:
        - push

  - name: await ecs rollout
    image: alpine:3.11.6
    environment:
      build_id_url: https://taxiphvdata.drive-clean-air-zone.service.gov.uk/build_id
      SRC_AWS_ACCOUNT_ROLE: arn:aws:iam::360470905865:role/jaqu-stagingServiceRole
      AWS_ACCESS_KEY_ID:
        from_secret: jaqu_staging_aws_access_key_id
      AWS_SECRET_ACCESS_KEY:
        from_secret: jaqu_staging_aws_secret_access_key
      AWS_DEFAULT_REGION: eu-west-2
    commands:
      - apk add --update bash python python-dev py-pip build-base jq
      - pip install awscli
      - mkdir ~/.aws
      - echo -e "[profile target_acc]\nrole_arn = $SRC_AWS_ACCOUNT_ROLE\ncredential_source = Environment\nrole_session_name = AWSACCOUNT" > ~/.aws/config
      - TASKDEF=`aws ecs describe-services --profile target_acc --cluster ntr-cluster-preprod  --services ntr-preprod-ecs-service | jq --raw-output '.services[0].taskDefinition'`
      - export build_id=`aws ecs describe-task-definition  --profile target_acc --task-definition $TASKDEF | jq --raw-output '.taskDefinition.containerDefinitions[0].image' | cut -f 2 -d ':'`
      - apk add curl
      - sh ci-cd-resources/check_build_number.sh
    volumes:
      - name: docker_sock
        path: /var/run/docker.sock
    when:
      event:
        - push
  ################################################# End of Prod Environment Steps ############################################################


  ################################################ Secrets - IAC Restructure #########################################################

# Note the below values are pulled from AWS Secrets Manager via the aws-secrets Drone plugin
---
kind: secret
name: jaqu_lower_aws_access_key_id
get:
  path: /build-tools/drone
  name: awsLowerAccessKeyId

---
kind: secret
name: jaqu_lower_aws_secret_access_key
get:
  path: /build-tools/drone
  name: awsLowerSecretAccessKey


---
kind: secret
name: jaqu_lower_service_aws_access_key_id
get:
  path: /build-tools/drone
  name: awsLowerServiceAccessKeyId

---
kind: secret
name: jaqu_lower_service_aws_secret_access_key
get:
  path: /build-tools/drone
  name: awsLowerServiceSecretAccessKey

---
kind: secret
name: jaqu_controlled_aws_access_key_id
get:
  path: /build-tools/drone
  name: awsControlledAccessKeyId

---
kind: secret
name: jaqu_controlled_aws_secret_access_key
get:
  path: /build-tools/drone
  name: awsControlledSecretAccessKey


---
kind: secret
name: jaqu_controlled_service_aws_access_key_id
get:
  path: /build-tools/drone
  name: awsControlledServiceAccessKeyId

---
kind: secret
name: jaqu_controlled_service_aws_secret_access_key
get:
  path: /build-tools/drone
  name: awsControlledServiceSecretAccessKey

---
kind: secret
name: jaqu_staging_aws_access_key_id
get:
  path: /build-tools/drone
  name: awsStagingAccessKeyId

---
kind: secret
name: jaqu_staging_aws_secret_access_key
get:
  path: /build-tools/drone
  name: awsStagingSecretAccessKey


---
kind: secret
name: jaqu_staging_service_aws_access_key_id
get:
  path: /build-tools/drone
  name: awsStagingServiceAccessKeyId

---
kind: secret
name: jaqu_staging_service_aws_secret_access_key
get:
  path: /build-tools/drone
  name: awsStagingServiceSecretAccessKey


---
kind: secret
name: jaqu_prod_aws_access_key_id
get:
  path: /build-tools/drone
  name: awsProdAccessKeyId

---
kind: secret
name: jaqu_prod_aws_secret_access_key
get:
  path: /build-tools/drone
  name: awsProdSecretAccessKey



---
kind: secret
name: jaqu_master_aws_access_key_id
get:
  path: /build-tools/drone
  name: awsMasterAccessKeyId

---
kind: secret
name: jaqu_master_aws_secret_access_key
get:
  path: /build-tools/drone
  name: awsMasterSecretAccessKey

---
kind: secret
name: jaqu_lower_sonar_host
get:
  path: /build-tools/drone
  name: sonarHost

---
kind: secret
name: jaqu_lower_sonar_token
get:
  path: /build-tools/drone
  name: sonarToken

---
kind: secret
name: jaqu_lower_github_private_key
get:
  path: /build-tools/drone
  name: githubPrivateKey

---
kind: secret
name: browserstack_auth_key
get:
  path: /build-tools/drone
  name: browserStackAuthKey

---
kind: secret
name: browserstack_username
get:
  path: /build-tools/drone
  name: browserStackUsername

---
kind: secret
name: ntr_ruby_secret
get:
  path: /build-tools/drone
  name: ntrRubySecret

################################################ End Secrets #########################################################
